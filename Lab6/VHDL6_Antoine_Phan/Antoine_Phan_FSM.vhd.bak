library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Antoine_Phan_FSM is
    port(
        seq : in std_logic;
        enable, reset, clk: in std_logic;
        out_1, out_2: out std_logic
        -- generate 1 when "1011" and "0100", respectively
    );
end Antoine_Phan_FSM;

architecture arch of Antoine_Phan_FSM is
    type FSM1_states is (
        stateA, stateB, stateC,
        stateD, stateE
    );
    signal state1: FSM1_states := stateA;
begin
    -- FSM 1 "1011"
    process(clk, enable, reset)
    begin
        if reset = '0' then
            out_1 <= '0';
        else 
            if enable = '1' then
                if rising_edge(clk) then
                    case state1 is
                        when state1 = stateA and seq = '1' =>
                            state1 <= stateB;
                        when state1 = stateB and seq = '0' =>
                            state1 <= stateC;
                        when state1 = stateC and seq = '1' =>
                            state1 <= stateD;
                        when state1 = stateD and seq = '1' =>
                            state1 <= stateE;
                        when state1 = stateE =>
                            out_1 <= '1';
                            if seq = '1' then
                                state1 <= stateA;
                            elsif seq = '0' then
                                state1 <= stateB;
                            end if;
                        when others =>
                            state1 <= stateA;
                    end if;
                end if;
            end if;
            
    end process;
    
    
    
end architecture arch;